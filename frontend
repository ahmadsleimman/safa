<!-- Bootstrap CSS -->
<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet"/>
<link href="filecss.css" rel="stylesheet"/>
<!-- Option 2: Separate Popper and Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js" integrity="sha384-IQsoLXl5PILFhosVNubq5LC7Qb9DXgDA9i+tQ8Zj3iwWAwPtgFTxbJ8NT4GN1R8p" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.min.js" integrity="sha384-cVKIPhGWiC2Al4u+LWgxfKTRIcfu0JTxR+EQDz/bgldoEyl4H0zUF0QKbrJ0EcQF" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/twbs-pagination/1.4.2/jquery.twbsPagination.min.js"
integrity="sha512-frFP3ZxLshB4CErXkPVEXnd5ingvYYtYhE5qllGdZmcOlRKNEPbufyupfdSTNmoF5ICaQNO6SenXzOZvoGkiIA==" 
crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- driver -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<!-- <script src="file.js"></script> -->




<div class="gallery">
    <div class="main_filter">
        <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton"
                data-bs-toggle="dropdown" aria-expanded="false">
                Dropdown Menu
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <button class="dropdown-item dropdown-toggle" type="button" id="dropdownMenuLink1"
                    data-bs-toggle="dropdown" aria-expanded="false" onclick="event.stopPropagation()">
                    Dropdown List 1
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink1">
                        <li>
                            <input type="checkbox" id="msaCheckbox" name="language" value="Arabic - Modern Standard Arabic">
                            <label for="msaCheckbox">Arabic - Modern Standard Arabic</label>
                        </li>

                        <li>
                            <input type="checkbox" id="levantineCheckbox" name="language" value="Arabic - Levantine">
                            <label for="levantineCheckbox">Arabic - Levantine</label>
                        </li>

                        <li>
                            <input type="checkbox" id="iraqiCheckbox" name="language" value="Arabic - Iraqi">
                            <label for="iraqiCheckbox">Arabic - Iraqi</label>
                        </li>

                        <li>
                            <input type="checkbox" id="egyptianCheckbox" name="language" value="Arabic - Egyptian">
                            <label for="egyptianCheckbox">Arabic - Egyptian</label>
                        </li>

                        <li>
                            <input type="checkbox" id="yemeniCheckbox" name="language" value="Arabic - Yemeni">
                            <label for="yemeniCheckbox">Arabic - Yemeni</label>
                        </li>

                        <li>
                            <input type="checkbox" id="lebaneseCheckbox" name="language" value="Arabic - Lebanese">
                            <label for="lebaneseCheckbox">Arabic - Lebanese</label>
                        </li>

                        <li>
                            <input type="checkbox" id="spanishCheckbox" name="language" value="Spanish">
                            <label for="spanishCheckbox">Spanish</label>
                        </li>

                        <li>
                            <input type="checkbox" id="persianCheckbox" name="language" value="Persian">
                            <label for="persianCheckbox">Persian</label>
                        </li>

                        <li>
                            <input type="checkbox" id="frenchCheckbox" name="language" value="French">
                            <label for="frenchCheckbox">French</label>
                        </li>

                        <li>
                            <input type="checkbox" id="englishCheckbox" name="language" value="English">
                            <label for="englishCheckbox">English</label>
                        </li>

                        <li>
                            <input type="checkbox" id="ukrainianCheckbox" name="language" value="Ukrainian">
                            <label for="ukrainianCheckbox">Ukrainian</label>
                        </li>

                        <li>
                            <input type="checkbox" id="learningToolsCheckbox" name="language" value="Learning tools for any language">
                            <label for="learningToolsCheckbox">Learning tools for any language</label>
                        </li>
                </ul>
                <button class="dropdown-item dropdown-toggle" type="button" id="dropdownMenuLink2"
                    data-bs-toggle="dropdown" aria-expanded="false" onclick="event.stopPropagation()">
                    Dropdown List 2
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink2">
                    <li><input type="checkbox" name="proficiency" value="Beginner"> Beginner</li>
                    <li><input type="checkbox" name="proficiency" value="Intermediate"> Intermediate</li>
                    <li><input type="checkbox" name="proficiency" value="Advanced"> Advanced</li>
                    
                </ul>
                <button class="dropdown-item dropdown-toggle" type="button" id="dropdownMenuLink3"
                    data-bs-toggle="dropdown" aria-expanded="false" onclick="event.stopPropagation()">
                    Dropdown List 3
                </button>
                <ul class="dropdown-menu" aria-labelledby="dropdownMenuLink3">
                        <li>
                            <input type="checkbox" id="articleCheckbox" name="contentType" value="Article">
                            <label for="articleCheckbox">Article</label>
                        </li>

                        <li>
                            <input type="checkbox" id="videoCheckbox" name="contentType" value="Video">
                            <label for="videoCheckbox">Video</label>
                        </li>

                        <li>
                            <input type="checkbox" id="songCheckbox" name="contentType" value="Song">
                            <label for="songCheckbox">Song</label>
                        </li>

                        <li>
                            <input type="checkbox" id="bookCheckbox" name="contentType" value="Book">
                            <label for="bookCheckbox">Book</label>
                        </li>

                        <li>
                            <input type="checkbox" id="scriptCheckbox" name="contentType" value="Script">
                            <label for="scriptCheckbox">Script</label>
                        </li>

                        <li>
                            <input type="checkbox" id="audioCheckbox" name="contentType" value="Audio">
                            <label for="audioCheckbox">Audio</label>
                        </li>

                        <li>
                            <input type="checkbox" id="exerciseCheckbox" name="contentType" value="Exercise">
                            <label for="exerciseCheckbox">Exercise</label>
                        </li>

                        <li>
                            <input type="checkbox" id="vocabsCheckbox" name="contentType" value="Vocabs">
                            <label for="vocabsCheckbox">Vocabs</label>
                        </li>

                        <li>
                            <input type="checkbox" id="otherCheckbox" name="contentType" value="Other">
                            <label for="otherCheckbox">Other</label>
                        </li>
                </ul>
            </div>
        </div>
        <div class="input-group">
            <input type="search" class="form-control rounded" placeholder="Search" aria-label="Search" aria-describedby="search-addon" />
            <button type="button" class="btn btn-outline-primary" data-mdb-ripple-init>search</button>
        </div>
        <div class="search_sort">
            <div class="filter">
            <label>Sort by:</label>
            <select id="sort" class="styled-select">
                <option value="default">Default</option>
                <option value="name">Name</option>
                <option value="date">Uploaded Date</option>
            </select>
            </div>
        </div>
    </div>
    
        <div class="items" id="galleryItems">
            <!-- Gallery items will be inserted here -->
        </div>
        <div class="pagination">
            <ul id="paginationControls" class="pagination-list">
                <!-- Pagination controls will be inserted here -->
            </ul>
        </div>
    
</div>




<?php

$curl = curl_init();

curl_setopt_array($curl, array(
  CURLOPT_URL => 'https://api.airtable.com/v0/appFL50D4aFOelacF/tblM5uT4tIm6Y9FZU/listRecords',
  CURLOPT_RETURNTRANSFER => true,
  CURLOPT_ENCODING => '',
  CURLOPT_MAXREDIRS => 10,
  CURLOPT_TIMEOUT => 0,
  CURLOPT_FOLLOWLOCATION => true,
  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
  CURLOPT_CUSTOMREQUEST => 'POST',
  CURLOPT_POSTFIELDS =>'{
    "fields": [
        "fldg512V0sAhDuO2Y",
        "fldYIHkb9VTHmUfEK",
        "fldBnkZQR2tc2OSRe",
        "fldWazbqTnIHie85X",
        "fldzcYVJoVrurF3Ci",
        "fldeFSnZR89jrxHd2",
        "fldX1LFm2JHtzTbJy",
        "fld8sFXpDw83thLXf",
        "fldAYTFVC6kS9CpJg",
        "fldCABNmcQ1C52hJc"
    ]
}',
  CURLOPT_HTTPHEADER => array(
    'Authorization: Bearer pat42XUmn6RD11bGU.62b12001f0eacaa006e1870c9bae6aeb881da7072634217e954e8ecc4989aa20',
    'Content-Type: application/json',
    'Cookie: brw=brwsULyvcvofVg4aO; AWSALB=bebBSkZjO/Cezk9RcjfPETShNYV7BXgtBf+iVJ9ekXGgVzYMV1gIdY+PwqaXidVpeuYTH9/R7pltoGh+oBP1JBbwIRNpHv16snAmXrb1sYznqizi/Y9dFaBaWD58; AWSALBCORS=bebBSkZjO/Cezk9RcjfPETShNYV7BXgtBf+iVJ9ekXGgVzYMV1gIdY+PwqaXidVpeuYTH9/R7pltoGh+oBP1JBbwIRNpHv16snAmXrb1sYznqizi/Y9dFaBaWD58'
  ),
  CURLOPT_SSL_VERIFYPEER => false, 
));

$response = curl_exec($curl);
$error = curl_error($curl); 
$info = curl_getinfo($curl);

curl_close($curl);

    $resources = json_decode($response,true);
    $records = $resources['records'];
//  echo json_encode($records);
    function get_icon($type){
        switch ($type) {
            case 'pdf':
                return 'https://natakallam.com/app/uploads/2023/11/pdf-icon.png'; 
            case 'doc':
            case 'docx':
                return 'https://natakallam.com/app/uploads/2023/11/doc-icon.png'; 
            case 'jpg':
            case 'jpeg':
            case 'png':
                return 'https://natakallam.com/app/uploads/2023/11/image-icon.png'; 
            case 'mp4':
            case 'mov':
                return 'https://natakallam.com/app/uploads/2023/11/video-icon.png'; 
            case 'mp3':
                return 'https://natakallam.com/app/uploads/2023/11/audio-icon.png'; 
            default:
                return 'https://natakallam.com/app/uploads/2023/11/default-icon.png'; 
        }
      } 
    $js_data_obj = 'const galleryData = [';
    
    foreach ($records as $res){
      $link = "";
      if(isset($res['fields']['Link'])){
        $link = '<a class="link_elmnt" href="'.$res['fields']['Link'].'" target="_blank"> <i class="fa fa-external-link" aria-hidden="true"></i>  Resource link</a>';
      }
      if(isset($res['fields']['Link 2'])){
        $link .= '<a class="link_elmnt" href="'.$res['fields']['Link 2'].'" target="_blank"> <i class="fa fa-external-link" aria-hidden="true"></i>  Resource link 2</a>';
      }
      $dialect = '';
      if(isset($res['fields']['Dialect'])){
        // $dialect = '<strong>Dialect:</strong> '.$res['fields']['Dialect'];
      }
      $attachement = '';
      if(isset($res['fields']['Attachments'])){
        $atts = $res['fields']['Attachments'];
        foreach($atts as $att){
          $url = $att['url'];
          $att_name = $att['filename'];
          $size = $att['size'];
          $type = explode(".",$att['filename']);
          if(isset($type[1])){
            $icon = get_icon($type[1]);
          }
          else{
            $icon = get_icon("");
          }
          $attachement .= '<a class="resource-file" data-url="'.$url.'" href="'.$url.'" target="_blank"><img width="20" src="'.$icon.'">'.$att_name.'</a>';
        }
      }
      $types = '';
      $types_arr = [];
      if(isset($res['fields']['Document type:'])){
        foreach($res['fields']['Document type:'] as $type){
          array_push($types_arr, $type);
          $types .= '<div class="doc-type '.$type.'">'.$type.'</div>';
        }
      }
      if(isset($res['fields']['cover image'])){
        $cover_img = $res['fields']['cover image'];
      }
      else{
        $cover_img = 'https://natakallam.com/app/uploads/2023/11/resources-default-image.png';  
      }
      if(isset($res['fields']['Notes'])){
        $notes = str_replace("\n","",$res['fields']['Notes']);
      }
      else{
        $notes = '';  
      }
      
      if (isset($res['fields']['Date of approval'])) {
        
        $value = str_replace("\n","",$res['fields']['Date of approval']);
    } else {
      
        $value = '';
    }
    
    
      $js_data_obj .= '{ name: "'.$res['fields']["Document's Name"].'", 
        notes:"'.$notes.'", 
        language:"'.$res['fields']['Language'].'",
        level: "'.$res['fields']['Level:'].'",
        dialect: "'.$dialect.'",
        link: "",
        date: "'.$value.'",
        type:"'.str_replace('"','\'',json_encode($types_arr)).'",
        type_html:"'.str_replace('"','\'',$types).'", 
        files: "'.str_replace('"','\'', $attachement).'",
        image:"'.$cover_img.'"},';
    }

    $js_data_obj .= '];';
   ?>


 



<script>jQuery(document).ready(function($) {
    // Sample gallery data
     <?php echo $js_data_obj; ?>


    const itemsPerPage = 9; // Number of items per page
    let currentPage = 1; // Current page
    let filteredItems = [...galleryData]; // Initial list of items

    // Function to render the gallery items
    // function renderGalleryItems(items) {
    //     const $galleryItems = $("#galleryItems");
    //     $galleryItems.empty(); // Clear existing items
    //     items.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage).forEach(item => {
    //         const $item = $("<div class='item'></div>")
    //             .data("language", item.language)
    //             .data("level", item.level)
    //             .data("date", new Date(item.date).getTime())
    //             .html("<img class=\'cover-image\' src=\'"+item.image+"\'><h3>"+item.name+"</h3>"+item.type_html+"<p>"+markdownToHtml(item.notes)+"</p>"+item.files+"<div class=\'language_elmnt\'>"+item.link+"<br>"+item.language+" • "+item.level+"</div>");
    //         $galleryItems.append($item);
    //     });
    // }

    // Function to render gallery items on the web page
function renderGalleryItems(items) {
    // Select the container element with the ID "galleryItems" using jQuery
    const $galleryItems = $("#galleryItems");
    
    // Clear any existing items in the container
    $galleryItems.empty();

    // Calculate the range of items to display based on the current page and items per page
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = currentPage * itemsPerPage;
    
    // Iterate over the subset of items to display
    items.slice(startIndex, endIndex).forEach(item => {
        // Create a new HTML element for each item using jQuery
        const $item = $("<div class='item'></div>")
            // Set data attributes for additional metadata
            .data({
                "language": item.language,
                "level": item.level,
                "date": new Date(item.date).getTime()
            })
            // Set the HTML content for the item
            .html(`
                <img class='cover-image' src='${item.image}'>
                <h3>${item.name}</h3>
                ${item.type_html}
                <p>${markdownToHtml(item.notes)}</p>
                ${item.files}
                <div class='language_elmnt'>
                    ${item.link}<br>${item.language} • ${item.level}
                </div>
            `);

        // Append the created item to the container
        $galleryItems.append($item);
    });
}


    // Initialize pagination
    function initPagination(totalItems) {
        var total_pages = Math.ceil(totalItems / itemsPerPage);
        $("#paginationControls").twbsPagination({
            totalPages: (total_pages==0)?1:total_pages,
            visiblePages: 5, // Adjust as needed
            next: ">",
            prev: "<",
            first: "<<",
            last: ">>",
            onPageClick: function (event, page) {
                currentPage = page;
                renderGalleryItems(filteredItems);
            }
        });
    }
    // Initial rendering
    renderGalleryItems(filteredItems);
    initPagination(filteredItems.length);
    $("#filter2").select2({placeholder     : "Level",}).trigger("change");
    $("#filter1").select2({placeholder     : "Language",}).trigger("change");
    $("#filter3").select2({placeholder     : "File type",}).trigger("change");
    // Event listeners for filter, search, and sort
    $("#filter1, #filter2, #filter3, #search, #sort").on("change input", function () {
    	console.log($("#filter2").val());
        const filter1Value = $("#filter1").val();
        const filter2Value = $("#filter2").val();
        const filter3Value = $("#filter3").val();
        const searchTerm = $("#search").val().toLowerCase();
        const sortBy = $("#sort").val();

        // Apply filters
        filteredItems = galleryData.filter(item => {
            const itemTypeArr = JSON.parse(item.type);
            const langaugeMatch = (filter1Value.length === 0 || filter1Value.includes(item.language));
            const levelMatch = (filter2Value.length === 0 || filter2Value.includes(item.level));
            const typeMatch = (filter3Value.length === 0 || itemTypeArr.some(itemm => filter3Value.includes(itemm)));
            const searchMatch = item.name.toLowerCase().includes(searchTerm);

            return langaugeMatch && levelMatch && typeMatch && searchMatch;
        });

        // Apply sorting
        if (sortBy === "name") {
            filteredItems.sort((a, b) => a.name.localeCompare(b.name));
        } else if (sortBy === "date") {
            filteredItems.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());
        }
        // Update pagination and re-render items
        $("#paginationControls").twbsPagination("destroy");
        initPagination(filteredItems.length);
        renderGalleryItems(filteredItems);
    });
    
});
function markdownToHtml(text) {
    // Headings (# H1, ## H2, ### H3, etc.)
    text = text.replace(/^#{1,6}\s?(.+)/gm, function(match, group1) {
        let level = match.split(' ')[0].length;
        return `<h${level}>${group1}</h${level}>`;
    });

    // Bold (**text**)
    text = text.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");

    // Italics (_text_)
    text = text.replace(/_(.*?)_/g, "<i>$1</i>");

    // Ordered Lists
    text = text.replace(/^\d+\.\s+(.+)$/gm,'<li>$1</li>').replace(/(<li>.*<\/li>)/g, '<ol>$1</ol>');

    // Unordered Lists
    text = text.replace(/^\*\s+(.+)$/gm,'<li>$1</li>').replace(/(<li>.*<\/li>)/g, '<ul>$1</ul>');

    // Blockquotes (>)
    text = text.replace(/^>\s?(.+)/gm, "<blockquote>$1</blockquote>");

    // Inline Code (`code`)
    text = text.replace(/`(.+?)`/g, "<code>$1</code>");

    // Code Blocks (```)
    text = text.replace(/```([\s\S]*?)```/g, "<pre><code>$1</code></pre>");

    // Links ([text](link))
    text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, "<a href=\'$2\'>$1</a>");

    // Horizontal Rule (---)
    text = text.replace(/^---$/gm, "<hr>");
    text = text.replace(/\n/g, "<br>");

    return text;
}

</script>
<style>
.main_filter{
    display: flex;
    justify-content: center;
    margin-top: 30px;
}
.dropdown{
    margin-right: 30px;
}
.dropdown-menu.show{
    margin: 15px;
    display: flex;
    padding: 15px;
    display: flex;
    flex-direction: column;
}
ul.dropdown-menu.show[aria-labelledby="dropdownMenuLink1"] {
    display: flex;
    flex-direction: column;
}
.search_sort {
    display: flex;
    align-items: center;
}

.input-group {
    margin-right: 10px;
    width:500px; 
    display: flex;
}
.btn.btn-outline-primary{
    width:80;
    color: gray;
    border-color: gray;
    
}
.btn.btn-outline-primary:hover{
    color: white;
    border-color: gray;
    background-color: gray;
    
}
.btn.btn-outline-primary:active{
    color: white;
    border-color: gray;
    background-color: gray;
    
}
.form-control.rounded{
    width:420px;
}
.filter {
    margin-left: 20px; 
}

.search_sort .dropdown + .filter {
    margin-top: 10px; /* Adjust the margin as needed */
}

.styled-select{
    padding:7px;
    
}
.form-select{
    padding: 5px;
    width: auto;
    margin-right: 5px;
}
.items {
    display: flex;
    flex-wrap: wrap;
    gap: 5px;
    justify-content: center;
    overflow: hidden;
    margin-top: 20px;
}

.item {
    width: 320px;
    min-height: 500px;
    font-family: 'Fellix medium';
    padding-bottom: 10px;
    border: 1px solid #ccc;
    background-color: #fff;
    border-radius: 5px;
    position: relative;
    margin: 5px;
    text-align: left;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    overflow: hidden;
}
.item h3{
    font-size: 18px;
    padding: 15px 10px;
    margin-bottom: 0;
    border-bottom: 1px solid green;
}
.item p{font-size: 16px;margin:0 10px;
    line-height: 30px;color:black;margin-top: 5px;}
.pagination {
    margin-top: 20px;
    display: flex;
    justify-content: center;
}

.pagination-list {
    list-style-type: none;
    padding: 0;
    margin: 20px auto;
}

.page-item {
    display: inline-block;
    margin: 0 5px;
    font-size: 18px;
    color: #007bff;
    cursor: pointer;
    font-family: 'Fellix medium';
}
.page-link{text-decoration: none;}
.page-item.active {
    font-weight: bold;
}

.link_elmnt{
    font-size: 14px;
    margin-bottom: 5px;
    margin-right: 10px;
    text-decoration: underline !important;
    font-weight: bold;
    display: inline-block;
}
.language_elmnt{    
    display: block;
    margin: 15px auto;
    padding: 5px;
    border-radius: 25px;
    font-size: 14px;
    line-height: 20px;
    position: absolute;
    bottom: 0px;
    width: 100%;
}
.level_elmnt{    
    margin: 15px 5px;
    padding: 5px;
    border-radius: 25px;
    font-size: 14px;
    line-height: 20px;
}
.doc-type{    
    margin: 5px;
    width: 60px;
    padding: 2px;
    text-align: center;
    border-radius: 25px;
    font-size: 12px;
    color: black;
    display: inline-block;
    line-height: 15px;
}
.resource-file{
    font-size: 14px;
    color: black;
    margin: 0 10px;
    display: block;
}
/* The Modal (background) */
.modal {
  display: none; /* Hidden by default */
  position: fixed; /* Stay in place */
  z-index: 1; /* Sit on top */
  padding-top: 100px; /* Location of the box */
  left: 0;
  top: 0;
  width: 100%; /* Full width */
  height: 100%; /* Full height */
  overflow: auto; /* Enable scroll if needed */
  background-color: rgb(0,0,0); /* Fallback color */
  background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
}

/* Modal Content */
.modal-content {
  background-color: #fefefe;
  margin: auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
}

/* The Close Button */
.close {
  color: #aaaaaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: #000;
  text-decoration: none;
  cursor: pointer;
}
.cover-image{
    border-radius: 5px 5px 0 0 !important;
    height: 150px !important;
    width: 350px !important;
    object-fit: cover;
    
}

/* document types colors */
.Article{
    background-color: #c4dcf5;
}
.Video{
    background-color: #91c0f2;
}
.Song{
    background-color: #f6a6ff;
}
.Book{
    background-color: #a6ffc8;
}
.Other{
    background-color: #fae5a2;
}
.Script{
    background-color: #faa2ba;
}
.Audio{
    background-color: #32a852;
}
.Exercise{
    background-color: #8f32a8;
}
.Vocabs{
    background-color: #a84c32;
}

</style>
